const rules = {
  'n/no-extraneous-import': 'off',
  'n/no-missing-import': 'off',
  'canonical/filename-match-exported': 'error',
  'canonical/no-restricted-strings': 'error',
  'canonical/no-use-extend-native': 'off',
  '@typescript-eslint/no-invalid-void-type': 'off',
  '@typescript-eslint/no-redundant-type-constituents': 'off',
  'sonarjs/no-identical-functions': 'off',
  'canonical/prefer-inline-type-import': 'off',
  'unicorn/prevent-abbreviations': 'off',
  '@typescript-eslint/no-unsafe-enum-comparison': 'off',
  'unicorn/no-abusive-eslint-disable': 'off',
  'unicorn/no-null': 'off',
  'unicorn/no-static-only-class': 'off',
  'unicorn/prefer-module': 'off',
  'unicorn/expiring-todo-comments': 'off',
  'sonarjs/no-duplicate-string': 'off',
  'import/no-duplicates': ['error'],
  'import/consistent-type-specifier-style': ['error', 'prefer-top-level'],
  'prettier/prettier': [
    'error',
    {
      singleQuote: true,
      trailingComma: 'all',
      tabWidth: 2,
      bracketSpacing: true,
    },
  ],
  'import/newline-after-import': 'error',
  /**
   * plugin:simple-import-sort
   */
  'simple-import-sort/imports': 'error',
  'simple-import-sort/exports': 'error',
  /**
   * plugin:typescript-eslint
   */
  'no-unused-vars': 'off',
  '@typescript-eslint/adjacent-overload-signatures': 'error',
  'max-params': ['error', 7],
  '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
  '@typescript-eslint/explicit-member-accessibility': [
    'off',
    {
      overrides: {
        constructors: 'off',
      },
    },
  ],
  '@typescript-eslint/member-ordering': 'off',
  '@typescript-eslint/no-extraneous-class': 'off',
  '@typescript-eslint/no-angle-bracket-type-assertion': 'off',
  '@typescript-eslint/no-confusing-non-null-assertion': 'warn',
  '@typescript-eslint/no-duplicate-enum-values': 'error',
  '@typescript-eslint/no-empty-interface': 'error',
  '@typescript-eslint/no-unnecessary-type-assertion': 'error',
  '@typescript-eslint/no-explicit-any': 'error',
  '@typescript-eslint/no-inferrable-types': 'error',
  '@typescript-eslint/ban-ts-comment': 'error',
  '@typescript-eslint/ban-tslint-comment': 'error',
  '@typescript-eslint/consistent-indexed-object-style': 'error',
  '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
  '@typescript-eslint/consistent-type-imports': [
    'error',
    { prefer: 'type-imports', fixStyle: 'separate-type-imports' },
  ],
  '@typescript-eslint/no-misused-new': 'error',
  '@typescript-eslint/restrict-template-expressions': 'off',
  '@typescript-eslint/no-require-imports': 'error',
  'keyword-spacing': 'off',
  '@typescript-eslint/no-namespace': 'error',
  '@typescript-eslint/no-this-alias': 'error',
  '@typescript-eslint/no-use-before-define': 'error',
  '@typescript-eslint/no-var-requires': 'error',
  '@typescript-eslint/prefer-for-of': 'error',
  '@typescript-eslint/prefer-function-type': 'error',
  '@typescript-eslint/prefer-namespace-keyword': 'error',
  '@typescript-eslint/unified-signatures': 'error',
  '@typescript-eslint/interface-name-prefix': 'off',
  '@typescript-eslint/no-non-null-assertion': 'off',
  '@typescript-eslint/no-shadow': 'error',
  '@typescript-eslint/no-unused-expressions': ['error'],
  /**
   * plugin:eslint
   */
  'no-await-in-loop': 'error',
  'padding-line-between-statements': [
    'error',
    { blankLine: 'always', prev: '*', next: 'return' },
    { blankLine: 'always', prev: '*', next: 'try' },
    { blankLine: 'always', prev: 'try', next: '*' },
    { blankLine: 'always', prev: '*', next: 'block-like' },
    { blankLine: 'always', prev: 'block-like', next: '*' },
    { blankLine: 'always', prev: '*', next: 'throw' },
    { blankLine: 'always', prev: 'var', next: '*' },
  ],
  'arrow-body-style': 'error',
  'arrow-parens': ['error', 'always'],
  complexity: 'off',
  'no-restricted-imports': [
    'error',
    {
      paths: [
        {
          name: 'rxjs/Rx',
          message: "Please import directly from 'rxjs' instead",
        },
      ],
    },
  ],
  'object-curly-spacing': ['error', 'always'],
  'no-multi-spaces': 'error',
  'no-useless-return': 'error',
  'no-else-return': 'error',
  'no-implicit-coercion': 'error',
  'constructor-super': 'error',
  yoda: 'error',
  strict: ['error', 'never'],
  curly: 'error',
  'dot-notation': 'error',
  'eol-last': 'error',
  eqeqeq: ['error', 'smart'],
  'guard-for-in': 'error',
  'id-match': 'error',
  'max-classes-per-file': 'off',
  'max-len': [
    'error',
    {
      code: 150,
    },
  ],
  'new-parens': 'error',
  'no-bitwise': 'error',
  'no-caller': 'error',
  'no-cond-assign': 'error',
  'no-constant-condition': 'error',
  'no-dupe-else-if': 'error',
  'lines-between-class-members': ['error', 'always'],
  'no-console': [
    'warn',
    {
      allow: [
        'info',
        'dirxml',
        'warn',
        'error',
        'dir',
        'timeLog',
        'assert',
        'clear',
        'count',
        'countReset',
        'group',
        'groupCollapsed',
        'groupEnd',
        'table',
        'Console',
        'markTimeline',
        'profile',
        'profileEnd',
        'timeline',
        'timelineEnd',
        'timeStamp',
        'context',
      ],
    },
  ],
  'no-debugger': 'error',
  'no-duplicate-case': 'error',
  'no-empty': 'error',
  'no-eval': 'error',
  'no-extra-bind': 'error',
  'no-fallthrough': 'error',
  'no-invalid-this': 'error',
  'no-irregular-whitespace': 'error',
  'no-multiple-empty-lines': [
    'error',
    {
      max: 1,
    },
  ],
  'no-new-func': 'error',
  'no-new-wrappers': 'error',
  'no-redeclare': 'error',
  'no-return-await': 'error',
  'no-sequences': 'error',
  'no-sparse-arrays': 'error',
  'no-template-curly-in-string': 'error',
  'no-shadow': 'off',
  'no-throw-literal': 'error',
  'no-trailing-spaces': 'error',
  'no-undef-init': 'error',
  'no-unsafe-finally': 'error',
  'no-unused-labels': 'error',
  'no-var': 'error',
  'object-shorthand': 'error',
  'prefer-const': 'error',
  'prefer-object-spread': 'error',
  'quote-props': ['error', 'consistent-as-needed'],
  radix: 'error',
  'use-isnan': 'error',
  'valid-typeof': 'off',
  'space-before-function-paren': 'off',

  'no-unused-vars': 'off',
  'unused-imports/no-unused-imports': 'error',
  //   'unused-imports/no-unused-vars': [
  //     'warn',
  //     {
  //       vars: 'all',
  //       args: 'none',
  //     },
  //   ],
  '@typescript-eslint/no-unsafe-member-access': 'off',
  '@typescript-eslint/no-unsafe-assignment': 'off',
  'deprecation/deprecation': 'off',
  '@typescript-eslint/no-unused-vars': 'off',
  'import/no-unresolved': 'off',
  '@typescript-eslint/no-explicit-any': 'off',
  '@typescript-eslint/ban-types': 'off',
  '@typescript-eslint/no-unnecessary-type-parameters': 'off',
  'unicorn/filename-case': 'off',
  '@typescript-eslint/no-unsafe-call': 'off',
  '@typescript-eslint/no-misused-promises': 'off',
  '@typescript-eslint/no-unnecessary-condition': 'off',
  '@typescript-eslint/await-thenable': 'off',
  '@typescript-eslint/require-await': 'off',
  '@typescript-eslint/prefer-nullish-coalescing': 'off',
  '@typescript-eslint/no-unsafe-return': 'off',
  'no-await-in-loop': 'off',
  '@typescript-eslint/no-useless-constructor': 'off',
  'import/named': 'off',
  'unicorn/no-array-reduce': 'warn',
  '@typescript-eslint/no-unsafe-function-type': 'off',
  '@typescript-eslint/no-unsafe-argument': 'off',
  '@typescript-eslint/ban-type': 'off',
  '@typescript-eslint/no-empty-function': 'off',
  'unicorn/prefer-top-level-await': 'off',
};
/**
 * @type {import('eslint').Linter.FlatConfig}
 */
module.exports = {
  parser: '@typescript-eslint/parser',
  env: {
    jest: true,
    es6: true,
    node: true,
  },
  ignorePatterns: [
    '.eslintrc.js',
    'test',
    'database',
    'ormconfig.ts',
    'boilerplate.polyfill',
  ],
  parserOptions: {
    ecmaVersion: 2022,
    project: './tsconfig.json',
    sourceType: 'module',
  },
  extends: [
    'plugin:@typescript-eslint/recommended',
    'eslint:recommended',
    'plugin:import/typescript',
    'plugin:prettier/recommended',
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended-type-checked',
    'plugin:@typescript-eslint/stylistic-type-checked',
    'plugin:@typescript-eslint/strict-type-checked',
    'plugin:unicorn/recommended',
    'plugin:import/recommended',
    'plugin:sonarjs/recommended',
    'plugin:promise/recommended',
    'plugin:n/recommended',
    'plugin:deprecation/recommended',
  ],
  plugins: [
    'unused-imports',
    '@typescript-eslint',
    'prettier',
    'simple-import-sort',
    'import',
    'unicorn',
    'sonarjs',
    'promise',
    'canonical',
    'n',
  ],
  rules,
};
